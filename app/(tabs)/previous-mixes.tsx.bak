import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Alert,
  Platform,
  Pressable,
  ActivityIndicator,
  ScrollView,
} from 'react-native';
import { COLORS } from '@/constants/Colors';
import MixHistoryTable, { MixHistoryItem } from '@/components/MixHistoryTable';
import PrimaryButton from '@/components/PrimaryButton';
import { CircleArrowLeft as ArrowLeftCircle } from 'lucide-react-native';
import { useAuth } from '@/contexts/AuthContext';
import { getUserMixHistory } from '@/utils/mixHistoryService';

export default function PreviousMixesScreen() {
  const { user } = useAuth();
  const [selectedMixId, setSelectedMixId] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [mixHistory, setMixHistory] = useState<MixHistoryItem[]>([]);

  useEffect(() => {
    const loadMixHistory = async () => {
      if (!user) return;

      setLoading(true);
      try {
        const history = await getUserMixHistory(user.uid);

        // Convert to format needed by MixHistoryTable
        const formattedHistory = history.map((item) => ({
          id: item.id || '',
          date: new Date(item.date).toLocaleDateString('en-US', {
            day: '2-digit',
            month: 'short',
          }),
          cement: `${item.cement}%`,
          slump: item.water > 25 ? 'High' : item.water < 15 ? 'Low' : 'Medium',
        }));

        setMixHistory(formattedHistory);
      } catch (error) {
        console.error('Error loading mix history:', error);
      } finally {
        setLoading(false);
      }
    };

    loadMixHistory();
  }, [user]);

  const handleRowPress = (id: string) => {
    setSelectedMixId(id);
  };

  const handleBackToList = () => {
    setSelectedMixId(null);
  };

  const handleExportLog = () => {
    if (Platform.OS === 'web') {
      Alert.alert(
        'Export Functionality',
        'In a production environment, this would export the mix data as a CSV file.'
      );
    } else {
      Alert.alert(
        'Export Functionality',
        'In a production environment, this would export the mix data as a CSV file.',
        [{ text: 'OK' }]
      );
    }
  };

  // Find the selected mix details
  const selectedMix = selectedMixId
    ? mixHistory.find((item) => item.id === selectedMixId)
    : null;

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={COLORS.primaryYellow} />
        <Text style={styles.loadingText}>Loading mix history...</Text>
      </View>
    );
  }

  if (selectedMix) {
    return (
      <View style={styles.container}>
        <View style={styles.headerContainer}>
          <Pressable style={styles.backButton} onPress={handleBackToList}>
            <ArrowLeftCircle size={24} color={COLORS.darkGray} />
            <Text style={styles.backButtonText}>Back to list</Text>
          </Pressable>
        </View>

        <View style={styles.detailsContainer}>
          <Text style={styles.detailsTitle}>
            Mix Details - {selectedMix.date}
          </Text>

          <View style={styles.detailsCard}>
            <View style={styles.detailsRow}>
              <Text style={styles.detailsLabel}>Date:</Text>
              <Text style={styles.detailsValue}>{selectedMix.date}</Text>
            </View>
            <View style={styles.detailsRow}>
              <Text style={styles.detailsLabel}>Cement Percentage:</Text>
              <Text style={styles.detailsValue}>{selectedMix.cement}</Text>
            </View>
            <View style={styles.detailsRow}>
              <Text style={styles.detailsLabel}>Slump Level:</Text>
              <Text style={styles.detailsValue}>{selectedMix.slump}</Text>
            </View>
            <View style={styles.detailsRow}>
              <Text style={styles.detailsLabel}>Mix ID:</Text>
              <Text style={styles.detailsValue}>MIX-{selectedMix.id}</Text>
            </View>
            <View style={styles.detailsRow}>
              <Text style={styles.detailsLabel}>Duration:</Text>
              <Text style={styles.detailsValue}>35 minutes</Text>
            </View>
            <View style={styles.detailsRow}>
              <Text style={styles.detailsLabel}>Operator:</Text>
              <Text style={styles.detailsValue}>
                {user?.email?.split('@')[0] || 'User'}
              </Text>
            </View>
          </View>

          <View style={styles.compositionCard}>
            <Text style={styles.compositionTitle}>Mix Composition</Text>
            <View style={styles.compositionRow}>
              <Text style={styles.compositionLabel}>Cement:</Text>
              <Text style={styles.compositionValue}>{selectedMix.cement}</Text>
            </View>
            <View style={styles.compositionRow}>
              <Text style={styles.compositionLabel}>Sand:</Text>
              <Text style={styles.compositionValue}>45%</Text>
            </View>
            <View style={styles.compositionRow}>
              <Text style={styles.compositionLabel}>Water:</Text>
              <Text style={styles.compositionValue}>25%</Text>
            </View>
          </View>

          <PrimaryButton
            title="Export Mix Log"
            onPress={handleExportLog}
            style={styles.exportButton}
          />
        </View>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Previous Mixes</Text>

      <Text style={styles.description}>
        View and analyze your previous concrete mixes. Select a row to view
        detailed information.
      </Text>

      {mixHistory.length > 0 ? (
        <MixHistoryTable data={mixHistory} onRowPress={handleRowPress} />
      ) : (
        <View style={styles.emptyStateContainer}>
          <Text style={styles.emptyStateText}>No mix history found</Text>
          <Text style={styles.emptyStateSubtext}>
            Create a mix design to see it here
          </Text>
        </View>
      )}

      <PrimaryButton
        title="Export Log"
        onPress={handleExportLog}
        style={styles.exportButton}
        disabled={mixHistory.length === 0}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.lightGray,
    padding: 16,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.lightGray,
  },
  loadingText: {
    fontFamily: 'Inter-Regular',
    fontSize: 16,
    color: COLORS.darkGray,
    marginTop: 12,
  },
  title: {
    fontFamily: 'Inter-Bold',
    fontSize: 20,
    color: COLORS.darkGray,
    marginBottom: 8,
  },
  description: {
    fontFamily: 'Inter-Regular',
    fontSize: 14,
    color: COLORS.darkGray,
    marginBottom: 16,
  },
  exportButton: {
    backgroundColor: COLORS.primaryYellow,
  },
  headerContainer: {
    marginBottom: 24,
  },
  backButton: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  backButtonText: {
    fontFamily: 'Inter-Medium',
    fontSize: 16,
    color: COLORS.darkGray,
    marginLeft: 8,
  },
  detailsContainer: {
    flex: 1,
  },
  detailsTitle: {
    fontFamily: 'Inter-Bold',
    fontSize: 20,
    color: COLORS.darkGray,
    marginBottom: 16,
  },
  detailsCard: {
    backgroundColor: COLORS.white,
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: COLORS.mediumGray,
  },
  detailsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.mediumGray,
  },
  detailsLabel: {
    fontFamily: 'Inter-Medium',
    fontSize: 14,
    color: COLORS.darkGray,
  },
  detailsValue: {
    fontFamily: 'Inter-Regular',
    fontSize: 14,
    color: COLORS.darkGray,
  },
  compositionCard: {
    backgroundColor: COLORS.white,
    borderRadius: 8,
    padding: 16,
    marginBottom: 24,
    borderWidth: 1,
    borderColor: COLORS.mediumGray,
  },
  compositionTitle: {
    fontFamily: 'Inter-SemiBold',
    fontSize: 16,
    color: COLORS.darkGray,
    marginBottom: 8,
  },
  compositionRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.mediumGray,
  },
  compositionLabel: {
    fontFamily: 'Inter-Medium',
    fontSize: 14,
    color: COLORS.darkGray,
  },
  compositionValue: {
    fontFamily: 'Inter-Regular',
    fontSize: 14,
    color: COLORS.darkGray,
  },
  emptyStateContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 40,
  },
  emptyStateText: {
    fontFamily: 'Inter-SemiBold',
    fontSize: 18,
    color: COLORS.darkGray,
    marginBottom: 8,
  },
  emptyStateSubtext: {
    fontFamily: 'Inter-Regular',
    fontSize: 14,
    color: COLORS.darkGray,
    textAlign: 'center',
  },
});
